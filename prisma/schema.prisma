// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]

  focusSessions FocusSession[]
  userItems UserItem[]
  worlds World[]
  preferences UserPreferences?

}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model FocusSession {
  id        String   @id @default(cuid())
  startTime DateTime @default(now())
  duration  Int      @default(1500) // 25 minutes in seconds
  completed Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@index([userId])
}

model Theme {
    id String @id @default(cuid())
    name String
    description String
    isActive Boolean @default(false)

    themeCategories ThemeCategory[]
    backgrounds Background[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userPreferences UserPreferences[] @relation("UserPreferredTheme")
}

model Background {
    id String @id @default(cuid())
    name String
    contentType String
    blob Bytes

    theme Theme @relation(fields: [themeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    themeId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([themeId])
}

model ThemeCategory {
    id String @id @default(cuid())
    name String
    description String

    theme Theme @relation(fields: [themeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    themeId String

    items Item[]

    @@unique([themeId, name])
    @@index([themeId])
}

model Item {
    id String @id @default(cuid())
    name String
    description String
    rarity String
    droprate Int

    themeCategory ThemeCategory @relation(fields: [themeCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    themeCategoryId String

    images ItemImage[]
    userItems UserItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([themeCategoryId, name])
    @@index([themeCategoryId])
}

model ItemImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId String
}

model UserItem {
    id String @id @default(cuid())
    quantity Int @default(1)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String
    item Item @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    itemId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, itemId])
}

model UserPreferences {
	id String @id @default(cuid())
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
	userId String @unique

	// Theme preferences
	preferredThemeId String?
	theme Theme? @relation("UserPreferredTheme", fields: [preferredThemeId], references: [id])

	// Focus preferences
	focusSessionDuration Int @default(1500) // 25 minutes in seconds
	musicProvider String @default("SPOTIFY")
	spotifyPlaylistUrl String @default("0vvXsWCC9xrXsKd4FyS8kM")
	youtubePlaylistUrl String @default("jfKfPfyJRdk")

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	@@index([preferredThemeId])
}

model World {
  id          String   @id @default(cuid())
  name        String
  description String?
  public      Boolean  @default(false)
  canvas      String   // Will store stringified fabric.js canvas state
  image       Bytes?   // New field to store the canvas image
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}
